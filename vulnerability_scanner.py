import re
def get_urls():
    """
    Prompt the user to enter URLs and return a list of valid URLs.
    """
    while True:
        try:
            urls_input = input("Enter the URLs separated by commas (HTTP:// instead of HTTPS://): ")
            if not urls_input:
                raise ValueError("Input cannot be empty. Please enter at least one URL.")
            
            urls = [url.strip() for url in urls_input.split(",")]
            if not all(url.startswith(("http://", "https://")) for url in urls):
                raise ValueError("All URLs must start with 'http://' or 'https://'.")
            return urls
        except ValueError as ve:
            print(f"Input error: {ve}")
        except Exception as e:
            print(f"An unexpected error occurred while processing URLs: {e}")

def get_credentials():
    """
    Prompt the user to enter credentials and return a list of tuples containing username and password.
    """
    while True:
        try:
            credentials_input = input("Enter credentials in format 'username:password' separated by commas: ")
            if not credentials_input:
                raise ValueError("Input cannot be empty. Please enter at least one set of credentials.")
            
            credentials = [tuple(cred.strip().split(":")) for cred in credentials_input.split(",")]
            if not all(len(cred) == 2 for cred in credentials):
                raise ValueError("Each credential must be in the format 'username:password'.")
            return credentials
        except ValueError as ve:
            print(f"Input error: {ve}")
        except Exception as e:
            print(f"An unexpected error occurred while processing credentials: {e}")

def scan_vulnerabilities(urls, credentials, passwords):
    """
    Scan the provided URLs, credentials, and passwords for various vulnerabilities.
    """
    try:
        # Insecure Protocols
        insecure_protocols = [url for url in urls if url.startswith("http://", re.IGNORECASE)]

        # SQL Injection
        sql_injections = [url for url in urls if re.search(r"(?:'|\")?\s*(?:OR|AND)\s*\d=\d", url, re.IGNORECASE)]

        # Cross-Site Scripting (XSS)
        xss_vulnerable = [url for url in urls if re.search(r"<script>", url, re.IGNORECASE)]

        # Open Directory Listings
        open_directories = [url for url in urls if url.endswith("/")]

        # Sensitive Data Exposure
        sensitive_data_exposure = [url for url in urls if re.search(r"(password|secret|api_key|token)=", url, re.IGNORECASE)]

        # Directory Traversal
        directory_traversal_vulnerable = [url for url in urls if re.search(r"\.\./", url) is not None]

        # Unrestricted File Upload
        unrestricted_file_uploads = [url for url in urls if "upload" in url.lower()]

        # Command Injection
        command_injection_vulnerable = [url for url in urls if re.search(r"(\||&&|\$)", url)]

        # Weak Passwords
        weak_passwords = ["123456", "password", "admin"]
        weak_password_vulnerable = [pwd for pwd in passwords if pwd in weak_passwords]

        # Default Credentials
        default_credentials = [("admin", "admin"), ("root", "root")]
        default_credential_vulnerable = [cred for cred in credentials if cred in default_credentials]

        # Print the results
        print("Insecure Protocols (HTTP instead of HTTPS):")
        for url in insecure_protocols:
            print(f"- {url}")

        print("\nPotential SQL Injection Vulnerabilities:")
        for url in sql_injections:
            print(f"- {url}")

        print("\nCross-Site Scripting (XSS) Vulnerabilities:")
        for url in xss_vulnerable:
            print(f"- {url}")

        print("\nOpen Directory Listings:")
        for url in open_directories:
            print(f"- {url}")

        print("\nSensitive Data Exposure:")
        for url in sensitive_data_exposure:
            print(f"- {url}")

        print("\nDirectory Traversal Vulnerabilities:")
        for url in directory_traversal_vulnerable:
            print(f"- {url}")

        print("\nUnrestricted File Uploads:")
        for url in unrestricted_file_uploads:
            print(f"- {url}")

        print("\nCommand Injection Vulnerabilities:")
        for url in command_injection_vulnerable:
            print(f"- {url}")

        print("\nWeak Passwords:")
        for pwd in weak_password_vulnerable:
            print(f"- {pwd}")

        print("\nDefault Credentials:")
        for cred in default_credential_vulnerable:
            print(f"- {cred}")

    except Exception as e:
        print(f"An error occurred during vulnerability scanning: {e}")

def main():
    """
    Main function to run the vulnerability scanner.
    """
    urls = get_urls()
    credentials = get_credentials()
    passwords = [cred[1] for cred in credentials]  # Extract passwords for weak password check
    scan_vulnerabilities(urls, credentials, passwords)

if __name__ == "__main__":
    main()
